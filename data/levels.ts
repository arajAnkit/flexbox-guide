import type { Level } from "../types/game";

export const levels: Level[] = [
  // Beginner Levels (1-10) - Container Properties
  {
    id: 1,
    title: "Center an Item",
    description:
      "Center the box both horizontally and vertically in the container.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: center; align-items: center; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use justify-content for horizontal centering and align-items for vertical centering.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "center",
      alignItems: "center",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 2,
    title: "Row of Items",
    description: "Arrange the boxes in a row with space between them.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: space-between; align-items: center; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use justify-content: space-between to create space between items.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 3,
    title: "Column Stack",
    description: "Stack the boxes in a column centered horizontally.",
    targetLayout:
      "display: flex; flex-direction: column; justify-content: flex-start; align-items: center; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: column to stack vertically and align-items: center to center horizontally.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "flex-start",
      alignItems: "center",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 4,
    title: "Wrap Items",
    description: "Make the items wrap to the next line when they don't fit.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: center; align-items: flex-start; flex-wrap: wrap;  align-content: flex-start;",
    hint: "Use flex-wrap: wrap to allow items to flow to the next line.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "center",
      alignItems: "flex-start",
      flexWrap: "wrap",
      alignContent: "flex-start",
    },
  },
  {
    id: 5,
    title: "End Alignment",
    description:
      "Align items to the end of the container both horizontally and vertically.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-end; align-items: flex-end; flex-wrap: nowrap; align-content: stretch;",
    hint: "Use justify-content: flex-end and align-items: flex-end.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-end",
      alignItems: "flex-end",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 6,
    title: "Space Around",
    description: "Distribute items with equal space around them.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: space-around; align-items: stretch; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use justify-content: space-around to create equal space around each item.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-around",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 7,
    title: "Space Evenly",
    description:
      "Distribute items with equal space between them and the edges.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: space-evenly; align-items: stretch; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use justify-content: space-evenly for equal spacing between all items and edges.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-evenly",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 8,
    title: "Baseline Alignment",
    description: "Align items along their text baseline.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: baseline; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use align-items: baseline to align items by their text baseline.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "baseline",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 9,
    title: "Column Reverse",
    description: "Stack items in a column from bottom to top.",
    targetLayout:
      "display: flex; flex-direction: column-reverse; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: column-reverse to reverse the stacking order.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "column-reverse",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 10,
    title: "Row Reverse",
    description: "Arrange items in a row from right to left.",
    targetLayout:
      "display: flex; flex-direction: row-reverse; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: row-reverse to reverse the horizontal order.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row-reverse",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  // Intermediate Levels (11-20) - Container Properties
  {
    id: 11,
    title: "Wrap Reverse",
    description: "Make items wrap from bottom to top when they don't fit.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: wrap-reverse;  align-content: stretch;",
    hint: "Use flex-wrap: wrap-reverse to reverse the wrapping direction.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "wrap-reverse",
      alignContent: "stretch",
    },
  },
  {
    id: 12,
    title: "Align Content Start",
    description: "Align wrapped lines to the start of the container.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: wrap;  align-content: flex-start;",
    hint: "Use align-content: flex-start to pack lines at the start of the container.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "wrap",
      alignContent: "flex-start",
    },
  },
  {
    id: 13,
    title: "Align Content End",
    description: "Align wrapped lines to the end of the container.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: wrap;  align-content: flex-end;",
    hint: "Use align-content: flex-end to pack lines at the end of the container.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "wrap",
      alignContent: "flex-end",
    },
  },
  {
    id: 14,
    title: "Align Content Center",
    description: "Center wrapped lines within the container.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: wrap;  align-content: center;",
    hint: "Use align-content: center to center wrapped lines.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "wrap",
      alignContent: "center",
    },
  },
  {
    id: 15,
    title: "Align Content Space Between",
    description: "Distribute wrapped lines with space between them.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: wrap;  align-content: space-between;",
    hint: "Use align-content: space-between to create space between wrapped lines.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "wrap",
      alignContent: "space-between",
    },
  },
  {
    id: 16,
    title: "Align Content Space Around",
    description: "Distribute wrapped lines with equal space around them.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: wrap;  align-content: space-around;",
    hint: "Use align-content: space-around for equal space around wrapped lines.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "wrap",
      alignContent: "space-around",
    },
  },
  {
    id: 17,
    title: "Column with End Alignment",
    description:
      "Stack items in a column aligned to the end of the cross axes.",
    targetLayout:
      "display: flex; flex-direction: column; justify-content: flex-start; align-items: flex-end; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: column and align-items: flex-end.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "flex-start",
      alignItems: "flex-end",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 18,
    title: "Column with Space Between",
    description: "Stack items in a column with space between them.",
    targetLayout:
      "display: flex; flex-direction: column; justify-content: space-between; align-items: stretch; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: column and justify-content: space-between.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-between",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 19,
    title: "Column Reverse with Center",
    description: "Stack items from bottom to top, centered horizontally.",
    targetLayout:
      "display: flex; flex-direction: column-reverse; justify-content: flex-start; align-items: center; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: column-reverse and align-items: center.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "column-reverse",
      justifyContent: "flex-start",
      alignItems: "center",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 20,
    title: "Row Reverse with End",
    description: "Arrange items from right to left, aligned to the bottom.",
    targetLayout:
      "display: flex; flex-direction: row-reverse; justify-content: flex-start; align-items: flex-end; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: row-reverse and align-items: flex-end.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row-reverse",
      justifyContent: "flex-start",
      alignItems: "flex-end",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  // Advanced Levels (21-25) - Container Properties
  {
    id: 21,
    title: "Centered Card",
    description: "Create a centered card with fixed width and height.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: center; align-items: center; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use justify-content: center and align-items: center to center the card.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "center",
      alignItems: "center",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 22,
    title: "Card Grid",
    description: "Create a grid of cards that wrap to new lines.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: center; align-items: stretch; flex-wrap: wrap;  align-content: stretch;",
    hint: "Use flex-wrap: wrap and justify-content: center for card grid layout.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "center",
      alignItems: "stretch",
      flexWrap: "wrap",
      alignContent: "stretch",
    },
  },
  {
    id: 23,
    title: "Masonry-like Layout",
    description: "Create a layout with items of different heights that wrap.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: flex-start; flex-wrap: wrap;  align-content: flex-start;",
    hint: "Use flex-wrap: wrap and align-content: flex-start.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "flex-start",
      flexWrap: "wrap",
      alignContent: "flex-start",
    },
  },
  {
    id: 24,
    title: "Column Space Around",
    description: "Stack items in a column with space around them.",
    targetLayout:
      "display: flex; flex-direction: column; justify-content: space-around; align-items: stretch; flex-wrap: nowrap;  align-content: stretch;",
    hint: "Use flex-direction: column and justify-content: space-around.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-around",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
  },
  {
    id: 25,
    title: "Ultimate Flex Challenge",
    description:
      "Create a complex layout with wrapped items, centered content, and space between lines.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: center; align-items: stretch; flex-wrap: wrap;  align-content: space-between;",
    hint: "Use flex-wrap: wrap, justify-content: center, and align-content: space-between.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "center",
      alignItems: "stretch",
      flexWrap: "wrap",
      alignContent: "space-between",
    },
  },
  // Item Property Levels (26-50)
  {
    id: 26,
    title: "Flex Grow Basics",
    description: "Make the second item grow to fill available space.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use flex-grow: 1 on the second item to make it expand.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "1", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 27,
    title: "Equal Growth",
    description: "Make all items grow equally to fill the container.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item3:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Set flex-grow: 1 on all items for equal distribution.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["1", "1", "1"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 28,
    title: "Proportional Growth",
    description: "Make the middle item grow twice as much as the others.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 2, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item3:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use flex-grow: 1 on items 1 and 3, and flex-grow: 2 on item 2.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["1", "2", "1"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 29,
    title: "Flex Basis Control",
    description: "Set different initial sizes for the items.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 100px, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 0, flex-shrink: 200px, flex-basis: auto, align-self: auto, order: 0); item3:(flex-grow: 0, flex-shrink: 150px, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use flex-basis to set initial sizes: 100px, 200px, 150px.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["100px", "200px", "150px"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 30,
    title: "Align Self Center",
    description: "Center the middle item while others stretch.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: center, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use align-self: center on the second item.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "center", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 31,
    title: "Align Self End",
    description: "Align the first item to the end while others stretch.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-end, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use align-self: flex-end on the first item.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["flex-end", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 32,
    title: "Basic Reordering",
    description: "Change the visual order: show item 3, then 1, then 2.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 1); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 2); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use order property: item 1 gets order: 1, item 2 gets order: 2, item 3 gets order: 0.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["1", "2", "0"],
    },
  },
  {
    id: 33,
    title: "Reverse Order",
    description:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 2); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 1); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    targetLayout: "flex with reversed order",
    hint: "Use order: 2 for item 1, order: 1 for item 2, order: 0 for item 3.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["2", "1", "0"],
    },
  },
  {
    id: 34,
    title: "Flex Shrink Control",
    description: "Prevent the first item from shrinking when space is limited.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 0, flex-basis: 200px, align-self: auto, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: 200px, align-self: auto, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: 200px, align-self: auto, order: 0);",
    hint: "Use flex-shrink: 0 on the first item to prevent it from shrinking.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["0", "1", "1"],
      flexBasis: ["200px", "200px", "200px"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 35,
    title: "Mixed Align Self",
    description: "Align items differently: start, center, end.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-start, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: center, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-end, order: 0);",
    hint: "Use align-self: flex-start, center, flex-end on items 1, 2, 3 respectively.",
    difficulty: "beginner",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["flex-start", "center", "flex-end"],
      order: ["0", "0", "0"],
    },
  },
  // Intermediate Item Levels (36-40)
  {
    id: 36,
    title: "Grow and Shrink",
    description: "Make the middle item grow and prevent it from shrinking.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 1, flex-shrink: 0, flex-basis: auto, align-self: auto, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use flex-grow: 1 and flex-shrink: 0 on the middle item.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "1", "0"],
      flexShrink: ["1", "0", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 37,
    title: "Basis with Growth",
    description: "Set initial sizes and make items grow proportionally.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 1, flex-shrink: 1, flex-basis: 50px, align-self: auto, order: 0); item2:(flex-grow: 2, flex-shrink: 1, flex-basis: 50px, align-self: auto, order: 0); item3:(flex-grow: 1, flex-shrink: 1, flex-basis: 50px, align-self: auto, order: 0);",
    hint: "Use flex-basis: 50px on all items and flex-grow: 1, 2, 1.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["1", "2", "1"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["50px", "50px", "50px"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 38,
    title: "Order with Alignment",
    description: "Reorder items and align them differently.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-end, order: 2); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-start, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: center, order: 1);",
    hint: "Reorder to 2,3,1 and align them start, center, end.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["flex-end", "flex-start", "center"],
      order: ["2", "0", "1"],
    },
  },
  {
    id: 39,
    title: "Column with Item Control",
    description: "In a column layout, center the middle item horizontally.",
    targetLayout:
      "display: flex; flex-direction: column; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: center, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use flex-direction: column and align-self: center on item 2.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "center", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 40,
    title: "Flexible Sidebar",
    description:
      "Create a flexible layout with a fixed sidebar and growing content.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 0, flex-basis: 200px, align-self: auto, order: 0); item2:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item3:(flex-grow: 0, flex-shrink: 0, flex-basis: 100px, align-self: auto, order: 0);",
    hint: "Use flex-basis: 200px on item 1, flex-grow: 1 on item 2.",
    difficulty: "intermediate",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "1", "0"],
      flexShrink: ["0", "1", "0"],
      flexBasis: ["200px", "auto", "100px"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  // Advanced Item Levels (41-50)
  {
    id: 41,
    title: "Complex Reordering",
    description:
      "Create a complex reordering: 3, 1, 2 with different alignments.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: center, order: 1); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-end, order: 2); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-start, order: 0);",
    hint: "Use order: 1, 2, 0 and align-self: center, flex-end, flex-start.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["center", "flex-end", "flex-start"],
      order: ["1", "2", "0"],
    },
  },
  {
    id: 42,
    title: "Proportional Flex",
    description: "Create a layout with proportional flex values: 1:2:3 ratio.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 1, flex-shrink: 1, flex-basis: 0px, align-self: auto, order: 0); item2:(flex-grow: 2, flex-shrink: 1, flex-basis: 0px, align-self: auto, order: 0); item3:(flex-grow: 3, flex-shrink: 1, flex-basis: 0px, align-self: auto, order: 0);",
    hint: "Use flex-grow: 1, 2, 3 for proportional sizing.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["1", "2", "3"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["0px", "0px", "0px"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 43,
    title: "Mixed Flex Properties",
    description:
      "Combine different flex-grow, flex-shrink, and flex-basis values.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 1, flex-shrink: 0, flex-basis: 100px, align-self: auto, order: 0); item2:(flex-grow: 0, flex-shrink: 2, flex-basis: 150px, align-self: auto, order: 0); item3:(flex-grow: 2, flex-shrink: 1, flex-basis: 50px, align-self: auto, order: 0);",
    hint: "Use different combinations of grow, shrink, and basis on each item.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["1", "0", "2"],
      flexShrink: ["0", "2", "1"],
      flexBasis: ["100px", "150px", "50px"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 44,
    title: "Column Reordering",
    description:
      "In a column layout, reorder items and align them differently.",
    targetLayout:
      "display: flex; flex-direction: column; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-end, order: 2); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: center, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-start, order: 1);",
    hint: "Use flex-direction: column, reorder items, and use different align-self values.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["flex-end", "center", "flex-start"],
      order: ["2", "0", "1"],
    },
  },
  {
    id: 45,
    title: "Flexible Grid",
    description: "Create a flexible grid with growing items and fixed spacing.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: space-between; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 1, flex-shrink: 1, flex-basis: 25%, align-self: auto, order: 0); item2:(flex-grow: 1, flex-shrink: 1, flex-basis: 25%, align-self: auto, order: 0); item3:(flex-grow: 1, flex-shrink: 1, flex-basis: 25%, align-self: auto, order: 0);",
    hint: "Use flex-grow: 1 on all items with specific flex-basis values.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["1", "1", "1"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["25%", "25%", "25%"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 46,
    title: "Priority Layout",
    description:
      "Create a layout where items have different shrinking priorities.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 3, flex-basis: 200px, align-self: auto, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: 200px, align-self: auto, order: 0); item3:(flex-grow: 0, flex-shrink: 2, flex-basis: 200px, align-self: auto, order: 0);",
    hint: "Use different flex-shrink values to control shrinking priority.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["3", "1", "2"],
      flexBasis: ["200px", "200px", "200px"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 47,
    title: "Baseline with Items",
    description:
      "Align items to baseline while controlling individual alignment.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: baseline; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: flex-end, order: 0); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use align-items: baseline and override with align-self on specific items.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "baseline",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "flex-end", "auto"],
      order: ["0", "0", "0"],
    },
  },
  {
    id: 48,
    title: "Dynamic Ordering",
    description: "Create a layout with negative and positive order values.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: flex-start; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: -1); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 1); item3:(flex-grow: 0, flex-shrink: 1, flex-basis: auto, align-self: auto, order: 0);",
    hint: "Use order: -1, 0, 1 to create specific ordering.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-start",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["0", "0", "0"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "auto", "auto"],
      alignSelf: ["auto", "auto", "auto"],
      order: ["-1", "1", "0"],
    },
  },
  {
    id: 49,
    title: "Ultimate Flex Control",
    description: "Master all flex item properties in one complex layout.",
    targetLayout:
      "display: flex; flex-direction: row; justify-content: space-around; align-items: stretch; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 2, flex-shrink: 1, flex-basis: 50px, align-self: flex-end, order: 1); item2:(flex-grow: 1, flex-shrink: 0, flex-basis: 100px, align-self: center, order: 0); item3:(flex-grow: 3, flex-shrink: 2, flex-basis: 25px, align-self: flex-start, order: 2);",
    hint: "Combine grow, shrink, basis, align-self, and order for the ultimate challenge.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-around",
      alignItems: "stretch",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["2", "1", "3"],
      flexShrink: ["1", "0", "2"],
      flexBasis: ["50px", "100px", "25px"],
      alignSelf: ["flex-end", "center", "flex-start"],
      order: ["1", "0", "2"],
    },
  },
  {
    id: 50,
    title: "Flexbox Mastery",
    description:
      "The ultimate flexbox challenge combining container and item properties.",
    targetLayout:
      "display: flex; flex-direction: column; justify-content: space-between; align-items: center; flex-wrap: nowrap;  align-content: stretch; item1:(flex-grow: 1, flex-shrink: 1, flex-basis: auto, align-self: flex-start, order: 0); item2:(flex-grow: 0, flex-shrink: 1, flex-basis: 100px, align-self: auto, order: 0); item3:(flex-grow: 2, flex-shrink: 1, flex-basis: auto, align-self: flex-end, order: 0);",
    hint: "Use all your flexbox knowledge to create this complex layout.",
    difficulty: "advanced",
    properties: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-between",
      alignItems: "center",
      flexWrap: "nowrap",
      alignContent: "stretch",
    },
    itemProperties: {
      flexGrow: ["1", "0", "2"],
      flexShrink: ["1", "1", "1"],
      flexBasis: ["auto", "100px", "auto"],
      alignSelf: ["flex-start", "auto", "flex-end"],
      order: ["0", "0", "0"],
    },
  },
];
